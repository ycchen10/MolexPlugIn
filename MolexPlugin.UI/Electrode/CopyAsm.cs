//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-12.0\UI\CopyAsm.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 11
//              Date: 08-02-2020  (Format: mm-dd-yyyy)
//              Time: 14:15 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using Basic;
using MolexPlugin.Model;
using MolexPlugin.DAL;
using System.Collections.Generic;

namespace MolexPlugin
{

    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class CopyAsm
    {
        //class members
        private static Session theSession = null;
        private static UI theUI = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.StringBlock MoldNumber;// Block type: String
        private NXOpen.BlockStyler.StringBlock PartNumber;// Block type: String
        private NXOpen.BlockStyler.StringBlock EditionNumber;// Block type: String
        private NXOpen.BlockStyler.StringBlock ClientNumber;// Block type: String
        private NXOpen.BlockStyler.Enumeration enum0;// Block type: Enumeration
        private AssembleModel assemble = null;
        MoldInfoModel moldInfo = null;
        List<string> err = new List<string>();
        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public CopyAsm()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                theDlxFileName = "CopyAsm.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }


        //------------------------------------------------------------------------------
        // Following method cleanup any housekeeping chores that may be needed.
        // This method is automatically called by NX.
        //------------------------------------------------------------------------------
        public static void UnloadLibrary(string arg)
        {
            try
            {
                //---- Enter your code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                Part workPart = theSession.Parts.Work;
                string type = AttributeUtils.GetAttrForString(workPart, "PartType");
                if (type != "ASM")
                {

                    theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "请切换ASM档为工作部件!");
                    return 0;
                }
                MoldInfoModel mold = new MoldInfoModel(workPart);
                assemble = AssembleSingleton.Instance().GetAssemble(mold.MoldNumber + "-" + mold.WorkpieceNumber);
                theDialog.Show();
                if (err.Count != 0)
                {
                    bool anyPartsModified;
                    PartSaveStatus saveStatus;
                    Part part = null;
                    if ((part = ReplacePart.Replace(assemble.Asm, moldInfo)) != null)
                    {
                        moldInfo.SetAttribute(part);
                        theSession.Parts.SaveAll(out anyPartsModified, out saveStatus);
                        err.Add("修改" + assemble.Asm.AssembleName + "成功！");
                    }
                    foreach (string st in err)
                    {
                        ClassItem.Print(st);
                    }
                }              
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                MoldNumber = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("MoldNumber");
                PartNumber = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("PartNumber");
                EditionNumber = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("EditionNumber");
                ClientNumber = (NXOpen.BlockStyler.StringBlock)theDialog.TopBlock.FindBlock("ClientNumber");
                enum0 = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("enum0");
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                Part workPart = theSession.Parts.Work;
                List<string> clientName = new List<string>();
                foreach (ControlEnum control in ControlValue.Controls)
                {
                    if (control.ControlType == "Client")
                        clientName.Add(control.EnumName);
                }
                this.ClientNumber.SetListItems(clientName.ToArray());
                if (clientName.Count >= 1)
                    this.ClientNumber.WideValue = clientName[0];
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }


        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {

                if (block == MoldNumber)
                {
                    //---------Enter your code here-----------
                }
                else if (block == PartNumber)
                {
                    //---------Enter your code here-----------
                }
                else if (block == EditionNumber)
                {
                    //---------Enter your code here-----------
                }
                else if (block == ClientNumber)
                {
                    //---------Enter your code here-----------
                }
                else if (block == enum0)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                bool isBorrow;
                UserInfoSingleton user = UserInfoSingleton.GetInstance();
                if (user.UserInfo == null)
                {
                    return 1;
                }
                moldInfo = new MoldInfoModel()
                {
                    MoldNumber = this.MoldNumber.WideValue.ToUpper(),
                    WorkpieceNumber = this.PartNumber.WideValue.ToUpper(),
                    EditionNumber = this.EditionNumber.WideValue.ToUpper(),
                    ClientName = this.ClientNumber.WideValue.ToUpper(),
                    CreatedDate = DateTime.Now.ToString("yyyy-MM-dd"),
                    CreatorName = user.UserInfo.UserName,

                };
                if (this.enum0.ValueAsString == "借用电极")
                {
                    isBorrow = true;
                }
                else
                    isBorrow = false;
                ReplaceAssmblies ra = new ReplaceAssmblies(assemble, moldInfo, isBorrow);
                err.AddRange(ra.Replace());
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }

    }
}
