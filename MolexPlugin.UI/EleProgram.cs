//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-12.0\UI\EleProgram.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 11
//              Date: 04-14-2020  (Format: mm-dd-yyyy)
//              Time: 20:21 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using MolexPlugin.DAL;
using MolexPlugin.Model;
using Basic;
using System.Linq;
using System.Collections.Generic;

namespace MolexPlugin
{

    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class EleProgram
    {
        //class members
        private static Session theSession = null;
        private static UI theUI = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.ScrolledWindow scrolledWindow;// Block type: Scrolled Window
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.Tree tree_eleInfo;// Block type: Tree Control
        private NXOpen.BlockStyler.DoubleBlock double_offestF;// Block type: Double
        private NXOpen.BlockStyler.DoubleBlock double_offestD;// Block type: Double
        private NXOpen.BlockStyler.DoubleBlock double_offsetR;// Block type: Double
        private NXOpen.BlockStyler.Group group2;// Block type: Group
        private NXOpen.BlockStyler.Tree tree_operInfo;// Block type: Tree Control
        private NXOpen.BlockStyler.ScrolledWindow scrolledWindow1;// Block type: Scrolled Window
        private NXOpen.BlockStyler.FolderSelection file;// Block type: NativeFolderBrowser
        private NXOpen.BlockStyler.Group group1;// Block type: Group
        private NXOpen.BlockStyler.ListBox list_box_template;// Block type: List Box
        private NXOpen.BlockStyler.DrawingArea png;// Block type: Drawing Area
        private NXOpen.BlockStyler.Button butTemplate;// Block type: Button
        private NXOpen.BlockStyler.Group group3;// Block type: Group
        private NXOpen.BlockStyler.Button button_corner;// Block type: Button
        private NXOpen.BlockStyler.Button button_profile;// Block type: Button
        private NXOpen.BlockStyler.Button button_boundaries;// Block type: Button
        private NXOpen.BlockStyler.Button button_zlevel;// Block type: Button
        private NXOpen.BlockStyler.Button button_fixed;// Block type: Button
        private NXOpen.BlockStyler.Button button_flowcut;// Block type: Button
        private NXOpen.BlockStyler.Group groupParameter;// Block type: Group
        private NXOpen.BlockStyler.Enumeration enumProgram;// Block type: Enumeration
        private NXOpen.BlockStyler.Enumeration enumTool;// Block type: Enumeration
        private NXOpen.BlockStyler.Enumeration enumReferenceTool;// Block type: Enumeration
        private NXOpen.BlockStyler.FaceCollector seleFace;// Block type: Face Collector
        private NXOpen.BlockStyler.Button buttAdd;// Block type: Button
        private NXOpen.BlockStyler.Group group5;// Block type: Group
        private NXOpen.BlockStyler.Toggle togCompute;// Block type: Toggle
        private NXOpen.BlockStyler.Toggle togPost;// Block type: Toggle
        private AssembleModel assemble;
        // private AbstractElectrodeOperation eleOper;
        private IDisplayObject m_highlight = null;
        List<CreateElectrodeCAM> eleCams = new List<CreateElectrodeCAM>();
        TreeOperInfoOperation treeOper;

        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public EleProgram()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                theDlxFileName = "EleProgram.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }




        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                Part workPart = theSession.Parts.Work;
                string type = AttributeUtils.GetAttrForString(workPart, "PartType");
                if (!type.Equals("ASM", StringComparison.CurrentCultureIgnoreCase))
                {
                    theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "请切换到ASM档");
                    return 0;
                }
                MoldInfoModel info = new MoldInfoModel(workPart);
                string name = info.MoldNumber + "-" + info.WorkpieceNumber;
                assemble = AssembleSingleton.Instance().GetAssemble(name);
                theDialog.Show();
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                scrolledWindow = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                tree_eleInfo = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_eleInfo");
                double_offestF = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("double_offestF");
                double_offestD = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("double_offestD");
                double_offsetR = (NXOpen.BlockStyler.DoubleBlock)theDialog.TopBlock.FindBlock("double_offsetR");
                group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
                tree_operInfo = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_operInfo");
                scrolledWindow1 = (NXOpen.BlockStyler.ScrolledWindow)theDialog.TopBlock.FindBlock("scrolledWindow1");
                file = (NXOpen.BlockStyler.FolderSelection)theDialog.TopBlock.FindBlock("file");
                group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
                list_box_template = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box_template");
                png = (NXOpen.BlockStyler.DrawingArea)theDialog.TopBlock.FindBlock("png");
                butTemplate = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("butTemplate");
                group3 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group3");
                button_corner = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_corner");
                button_profile = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_profile");
                button_boundaries = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_boundaries");
                button_zlevel = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_zlevel");
                button_fixed = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_fixed");
                button_flowcut = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_flowcut");
                groupParameter = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupParameter");
                enumProgram = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("enumProgram");
                enumTool = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("enumTool");
                enumReferenceTool = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("enumReferenceTool");
                seleFace = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("seleFace");
                buttAdd = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("buttAdd");
                group5 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group5");
                togCompute = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("togCompute");
                togPost = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("togPost");

                #region 回调函数
                //------------------------------------------------------------------------------
                //Registration of Treelist specific callbacks
                //------------------------------------------------------------------------------
                //tree_eleInfo.SetOnExpandHandler(new NXOpen.BlockStyler.Tree.OnExpandCallback(OnExpandCallback));

                //tree_eleInfo.SetOnInsertColumnHandler(new NXOpen.BlockStyler.Tree.OnInsertColumnCallback(OnInsertColumnCallback));

                //tree_eleInfo.SetOnInsertNodeHandler(new NXOpen.BlockStyler.Tree.OnInsertNodeCallback(OnInsertNodecallback));

                //tree_eleInfo.SetOnDeleteNodeHandler(new NXOpen.BlockStyler.Tree.OnDeleteNodeCallback(OnDeleteNodecallback));

                //tree_eleInfo.SetOnPreSelectHandler(new NXOpen.BlockStyler.Tree.OnPreSelectCallback(OnPreSelectcallback));

                tree_eleInfo.SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));

                //tree_eleInfo.SetOnStateChangeHandler(new NXOpen.BlockStyler.Tree.OnStateChangeCallback(OnStateChangecallback));

                //tree_eleInfo.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));

                //tree_eleInfo.SetColumnSortHandler(new NXOpen.BlockStyler.Tree.ColumnSortCallback(ColumnSortcallback));

                //tree_eleInfo.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));

                //tree_eleInfo.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));

                //tree_eleInfo.SetOnEndLabelEditHandler(new NXOpen.BlockStyler.Tree.OnEndLabelEditCallback(OnEndLabelEditCallback));

                //tree_eleInfo.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));

                //tree_eleInfo.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));

                tree_eleInfo.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback)); ;

                tree_eleInfo.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback)); ;

                //tree_eleInfo.SetIsDropAllowedHandler(new NXOpen.BlockStyler.Tree.IsDropAllowedCallback(IsDropAllowedCallback));;

                //tree_eleInfo.SetIsDragAllowedHandler(new NXOpen.BlockStyler.Tree.IsDragAllowedCallback(IsDragAllowedCallback));;

                //tree_eleInfo.SetOnDropHandler(new NXOpen.BlockStyler.Tree.OnDropCallback(OnDropCallback));;

                //tree_eleInfo.SetOnDropMenuHandler(new NXOpen.BlockStyler.Tree.OnDropMenuCallback(OnDropMenuCallback));

                //tree_eleInfo.SetOnDefaultActionHandler(new NXOpen.BlockStyler.Tree.OnDefaultActionCallback(OnDefaultActionCallback));

                //tree_operInfo.SetOnExpandHandler(new NXOpen.BlockStyler.Tree.OnExpandCallback(OnExpandCallback));

                //tree_operInfo.SetOnInsertColumnHandler(new NXOpen.BlockStyler.Tree.OnInsertColumnCallback(OnInsertColumnCallback));

                //tree_operInfo.SetOnInsertNodeHandler(new NXOpen.BlockStyler.Tree.OnInsertNodeCallback(OnInsertNodecallback));

                //tree_operInfo.SetOnDeleteNodeHandler(new NXOpen.BlockStyler.Tree.OnDeleteNodeCallback(OnDeleteNodecallback));

                //tree_operInfo.SetOnPreSelectHandler(new NXOpen.BlockStyler.Tree.OnPreSelectCallback(OnPreSelectcallback));

                //tree_operInfo.SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));

                //tree_operInfo.SetOnStateChangeHandler(new NXOpen.BlockStyler.Tree.OnStateChangeCallback(OnStateChangecallback));

                //tree_operInfo.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));

                //tree_operInfo.SetColumnSortHandler(new NXOpen.BlockStyler.Tree.ColumnSortCallback(ColumnSortcallback));

                //tree_operInfo.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));

                //tree_operInfo.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));

                //tree_operInfo.SetOnEndLabelEditHandler(new NXOpen.BlockStyler.Tree.OnEndLabelEditCallback(OnEndLabelEditCallback));

                //tree_operInfo.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));

                //tree_operInfo.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));

                tree_operInfo.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback)); ;

                tree_operInfo.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback)); ;

                //tree_operInfo.SetIsDropAllowedHandler(new NXOpen.BlockStyler.Tree.IsDropAllowedCallback(IsDropAllowedCallback));;

                //tree_operInfo.SetIsDragAllowedHandler(new NXOpen.BlockStyler.Tree.IsDragAllowedCallback(IsDragAllowedCallback));;

                //tree_operInfo.SetOnDropHandler(new NXOpen.BlockStyler.Tree.OnDropCallback(OnDropCallback));;

                //tree_operInfo.SetOnDropMenuHandler(new NXOpen.BlockStyler.Tree.OnDropMenuCallback(OnDropMenuCallback));

                //tree_operInfo.SetOnDefaultActionHandler(new NXOpen.BlockStyler.Tree.OnDefaultActionCallback(OnDefaultActionCallback));

                //------------------------------------------------------------------------------
                //------------------------------------------------------------------------------
                //Registration of ListBox specific callbacks
                //------------------------------------------------------------------------------
                //list_box_template.SetAddHandler(new NXOpen.BlockStyler.ListBox.AddCallback(AddCallback));

                //list_box_template.SetDeleteHandler(new NXOpen.BlockStyler.ListBox.DeleteCallback(DeleteCallback));

                //------------------------------------------------------------------------------
                #endregion
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                treeOper = new TreeOperInfoOperation(tree_operInfo);
                SetEleTreeTitle();
                SetOperTreeTitle();
                AddEleToTree();
                AddListBox();
                this.list_box_template.SelectedItemIndex = 0;
                this.SetTemplatePng();
                this.groupParameter.Enable = false;

            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----
                if (this.eleCams.Count > 0)
                {
                    // theSession.Parts.CloseAll(BasePart.CloseModified.CloseModified, null);
                    foreach (CreateElectrodeCAM cam in this.eleCams)
                    {
                        cam.CreateOper();
                    }
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {
                if (block == double_offestF)
                {
                    //---------Enter your code here-----------
                }
                else if (block == double_offestD)
                {
                    //---------Enter your code here-----------
                }
                else if (block == double_offsetR)
                {
                    //---------Enter your code here-----------
                }
                else if (block == file)
                {
                    //---------Enter your code here-----------
                }
                else if (block == list_box_template)
                {
                    //---------Enter your code here-----------
                    this.SetTemplatePng();

                }
                else if (block == png)
                {
                    //---------Enter your code here-----------
                }
                else if (block == butTemplate)
                {
                    //---------Enter your code here-----------
                    ElectrodeModel model = FindEle();
                    if (model != null)
                    {
                        CreateElectrodeCAM cam = new CreateElectrodeCAM(model);
                        cam.CreateOperName();
                        treeOper.AddOperTree(cam.EleOper);
                        this.eleCams.Add(cam);
                    }

                }
                else if (block == button_corner)
                {
                    //---------Enter your code here-----------
                }
                else if (block == button_profile)
                {
                    //---------Enter your code here-----------
                }
                else if (block == button_boundaries)
                {
                    //---------Enter your code here-----------
                }
                else if (block == button_zlevel)
                {
                    //---------Enter your code here-----------
                }
                else if (block == button_fixed)
                {
                    //---------Enter your code here-----------
                }
                else if (block == button_flowcut)
                {
                    //---------Enter your code here-----------
                }
                else if (block == enumProgram)
                {
                    //---------Enter your code here-----------
                }
                else if (block == enumTool)
                {
                    //---------Enter your code here-----------
                }
                else if (block == enumReferenceTool)
                {
                    //---------Enter your code here-----------
                }
                else if (block == seleFace)
                {
                    //---------Enter your code here-----------
                }
                else if (block == buttAdd)
                {
                    //---------Enter your code here-----------
                }
                else if (block == togCompute)
                {
                    //---------Enter your code here-----------
                }
                else if (block == togPost)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }
        //------------------------------------------------------------------------------
        //Treelist specific callbacks
        //------------------------------------------------------------------------------
        //public void OnExpandCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
        //{
        //}

        //public void OnInsertColumnCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        //public void OnInsertNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
        //{
        //}

        //public void OnDeleteNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
        //{
        //}

        //public void OnPreSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
        //{
        //}

        public void OnSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
        {
            if (tree.Equals(tree_eleInfo))
            {
                if (m_highlight != null)
                    m_highlight.Highlight(false);
                foreach (ElectrodeModel ele in assemble.Electrodes)
                {
                    if (ele.Node.Equals(node))
                    {
                        m_highlight = ele;
                        m_highlight.Highlight(true);
                    }
                }
            }
        }

        //public void OnStateChangecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int State)
        //{
        //}

        //public string ToolTipTextcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        //public int ColumnSortcallback(NXOpen.BlockStyler.Tree tree, int columnID, NXOpen.BlockStyler.Node node1, NXOpen.BlockStyler.Node node2)
        //{
        //}

        //public string StateIconNameCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int state)
        //{
        //}

        //public Tree.BeginLabelEditState OnBeginLabelEditCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        //public Tree.EndLabelEditState OnEndLabelEditCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, string editedText)
        //{
        //}

        //public Tree.EditControlOption OnEditOptionSelectedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, int selectedOptionID, string selectedOptionText, Tree.ControlType type)
        //{
        //}

        //public Tree.ControlType AskEditControlCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        public void OnMenuCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        {
            if (tree.Equals(this.tree_eleInfo) && node != null && node.IsSelected)
            {
                TreeListMenu eleMenu = this.tree_eleInfo.CreateMenu();
                eleMenu.AddMenuItem(1, "删除", "delete");
                this.tree_eleInfo.SetMenu(eleMenu);



            }
            if (tree.Equals(this.tree_operInfo) && node != null && node.IsSelected)
            {
                TreeListMenu operMenu = this.tree_operInfo.CreateMenu();
                operMenu.AddMenuItem(1, "添加", "add_new_sc");
                operMenu.AddMenuItem(2, "向上移动", "arrowup_sc");
                operMenu.AddMenuItem(3, "向下移动", "arrowdown_sc");
                operMenu.AddMenuItem(4, "删除", "delete");
                this.tree_operInfo.SetMenu(operMenu);
            }



        }

        public void OnMenuSelectionCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int menuItemID)
        {
            if (tree.Equals(this.tree_eleInfo))
            {
                this.tree_eleInfo.DeleteNode(node);
                this.eleCams.Remove(this.eleCams.Find(a => a.EleModel.Node.Equals(node)));
            }

        }

        //public Node.DropType IsDropAllowedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID)
        //{
        //}

        //public Node.DragType IsDragAllowedCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        //public bool OnDropCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node[] node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID, Node.DropType dropType, int dropMenuItemId)
        //{
        //}

        //public void OnDropMenuCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, NXOpen.BlockStyler.Node targetNode, int targetColumnID)
        //{
        //}

        //public void OnDefaultActionCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
        //{
        //}

        //------------------------------------------------------------------------------
        //ListBox specific callbacks
        //------------------------------------------------------------------------------
        //public int  AddCallback (NXOpen.BlockStyler.ListBox list_box)
        //{
        //}

        //public int  DeleteCallback(NXOpen.BlockStyler.ListBox list_box)
        //{
        //}

        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }

        /// <summary>
        /// 设置电极树列
        /// </summary>
        private void SetEleTreeTitle()
        {
            this.tree_eleInfo.InsertColumn(0, "电极名", 153);
            this.tree_eleInfo.InsertColumn(1, "电极类型", 80);
            this.tree_eleInfo.InsertColumn(2, "粗间隙", 80);
            this.tree_eleInfo.InsertColumn(3, "中间隙", 80);
            this.tree_eleInfo.InsertColumn(4, "精间隙", 80);
        }
        /// <summary>
        /// 设置刀路列
        /// </summary>
        private void SetOperTreeTitle()
        {
            this.tree_operInfo.InsertColumn(0, "程序名", 160);
            // this.tree_operInfo.SetColumnDisplayType(0, Tree.ColumnDisplay.Icon);
            this.tree_operInfo.InsertColumn(1, "刀具名", 100);

        }
        /// <summary>
        /// 设置电极行
        /// </summary>
        private void AddEleToTree()
        {
            assemble.Electrodes.Sort();
            foreach (ElectrodeModel ele in assemble.Electrodes)
            {
                if (ele.EleInfo.Positioning.Equals(""))
                {
                    Node pNode = this.tree_eleInfo.CreateNode(ele.EleInfo.EleName);
                    this.tree_eleInfo.InsertNode(pNode, null, null, Tree.NodeInsertOption.Last);
                    pNode.SetColumnDisplayText(0, ele.EleInfo.EleName);
                    pNode.SetColumnDisplayText(1, ele.EleInfo.EleType);
                    pNode.SetColumnDisplayText(2, ele.EleInfo.CrudeInter.ToString());
                    pNode.SetColumnDisplayText(3, ele.EleInfo.DuringInter.ToString());
                    pNode.SetColumnDisplayText(4, ele.EleInfo.FineInter.ToString());
                    ele.Node = pNode;
                }
            }
        }
        /// <summary>
        /// 设置刀路树
        /// </summary>
        private void AddOperTree(AbstractElectrodeOperation eleOper)
        {
            string dllPath = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
            string png = dllPath.Replace("application\\", "Images\\");
            List<string> progs = eleOper.Oper.GroupBy(p => p.NameModel.ProgramName).OrderBy(p => p.Key).Select(p => p.Key).ToList();
            foreach (string ao in progs)
            {
                Node pNode = this.tree_operInfo.CreateNode(ao);
                this.tree_operInfo.InsertNode(pNode, null, null, Tree.NodeInsertOption.Last);
                pNode.SetColumnDisplayText(0, ao);
                List<AbstractCreateOperation> oprs = eleOper.Oper.FindAll(a => a.NameModel.ProgramName.Equals(ao));
                int i = 1;
                foreach (AbstractCreateOperation an in oprs)
                {
                    Node node = this.tree_operInfo.CreateNode(i.ToString());
                    this.tree_operInfo.InsertNode(node, pNode, null, Tree.NodeInsertOption.Last);
                    node.SetColumnDisplayText(0, an.NameModel.OperName);
                    node.DisplayIcon = png + an.NameModel.PngName;
                    node.SelectedIcon = png + an.NameModel.PngName;
                    node.SetColumnDisplayText(1, an.NameModel.ToolName);
                    an.Node = node;
                    i++;
                }
                pNode.Expand(Node.ExpandOption.Expand); //展开节点
            }
        }
        /// <summary>
        /// 设置模板列表
        /// </summary>
        private void AddListBox()
        {
            string[] eleType = new string[] { "直电极", "直+等宽", "直+等高", "等宽+等高", "等高电极" };
            this.list_box_template.SetListItems(eleType);
        }
        /// <summary>
        /// 设置图片
        /// </summary>

        private void SetTemplatePng()
        {
            string dllPath = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
            string png = dllPath.Replace("application\\", "Images\\");
            string temp = this.list_box_template.SelectedItemString;
            this.png.Image = png + temp + ".bmp";
        }
        /// <summary>
        /// 查找电极
        /// </summary>
        /// <returns></returns>
        private ElectrodeModel FindEle()
        {
            Node[] seleNode = this.tree_eleInfo.GetSelectedNodes();
            if (seleNode.Length > 0)
            {
                foreach (ElectrodeModel em in assemble.Electrodes)
                {
                    if (em.Node.Equals(seleNode[0]))
                        return em;
                }
            }
            return null;
        }
    }
}
